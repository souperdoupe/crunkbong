#!/bin/ksh93

# WeFe - wefe enables fidelity everywhere
#  Sloppy manager to connect wifi through wpa_supplicant.
#  This is the sister-script to the interfaces.d variant.
#
# wefe-if and wefe-sup were inspired by Ceni and the FreeBSD wifi manager

# WIP
# 1) Change the config files naming schema to replace whitespace with
#	underscore, and also modify the 'add' command to have ssid input
#	within the function, rather than passing it as a command.  Same thing
#	for -c.  Rationale: currently reads $2 as the ssid, and thus a name like
#	"butt net" would be $2 and $3, respectively.
#	Possible workarounds:
#		a) set a function like "read essid"; or
#		b) find a way to say, "everything after -c will be the variable"
# 2) Create a "source" file, wefe.conf, with global values, not just for
#	variables, but also for default behaviors (eg, strip plaintext passphrases
#	by default).
# 3) Add a test/debug command, shorthand to drop the -B (daemonize) function

# Verify root
if [ "$(id -u)" != 0 ]; then echo "Re-run as root.  Exiting..."; exit; fi

#	OPTIONS		#

# In the future, add "source /etc/wefe/wefe.conf" or something...
iface="wlan0"		# Preferred wireless interface
requireMac="false"	# Require MAC addresses for networks (hardening)
editor="nano"		# For additional options or adjustments
wpaDriver="nl80211"	# wpasupplicant driver
wpaOptions="-B" 	# Other wpasupplicant options

# Other variables...
bssid="$3"
ssid="$2"
currentSsid=$(/sbin/iwconfig wlan0 | awk '{ print $4 }' | head -n 1 | sed 's/ESSID://g')
currentInet=$(/sbin/ifconfig wlan0 | grep "inet" | awk '{ print $2 }')

#	FUNCTIONS	#

# Function to kill dhclient and wpa_supplicant; suppress errors.
# It would make more sense to grep the iface first...
kill_them(){
	kill -9 $(pgrep dhclient) 2> /dev/null;
	kill -9 $(pgrep wpa_supplicant) 2> /dev/null;
	# This is necessary to avoid "RTNETLINK: File exists" complaints.
	ip addr flush dev "$iface"
}

# Function to run different pre- or post-connection commands
# Fun fact: not every network manager lets you do this...
exops(){
        # Create a file iface.pre in directory /etc/wefe/exops.d
        echo "If you'd like any commands to run BEFORE connection?  Type 'yes' if so; anything else to continue."
                read pre
                if [[ "$pre" == "yes" ]] ; then
                        $editor /etc/wefe/wefe-sup/exops/"$ssid".pre
                fi
        # Create a file iface.post in directory /etc/wefe/exops.d
        echo "If you'd like any commands to run AFTER connection?  Type 'yes' if so; anything else to continue."
                read post
                if [[ "$post" == "yes" ]] ; then
                        $editor /etc/wefe/wefe-sup/exops/"$ssid".post
                fi
}

# Function to update the connection
fun_update(){
	# Kill them, Johnny.  Kill them all...
	kill_them && \
		echo "Killing old processes..." && \
		# Reconnection can get wonky if you don't wait.
		sleep 5;
	sh /etc/wefe/wefe-sup/exops/"$ssid".pre 2> /dev/null
	wpa_supplicant -D$wpaDriver -i$iface -c/etc/wefe/wefe-sup/"$ssid" $wpaOptions && \
	dhclient $iface && \
	echo "Connected to $currentSsid ($currentInet)"
	sh /etc/wefe/wefe-sup/exops/"$ssid".post 2> /dev/null
}

# Function to connect to insecure networks
insecure(){
	kill_them
	# Pre-connection commands
	#sh /etc/wefe/exops/"$iface".pre
	# This line is all that's required for open networks.
	iwconfig $iface essid "$ssid"
	# Use a MAC address (optional)
	#if [[ "$requireMac" == "true" ]]; then iwconfig "$iface" bssid "$bssid"
	# For WEP networks, utilize the network key.
	if [[ "$1" == "-w" ]]; then
		# Obfuscate the network passphrase.  Ideally, I would have something to just
		# replace the input values with asterisk so you can see the number of characters
		echo "Input network passphrase, then press ENTER..." && \
			stty -echo && \
	        	read key && \
        		stty echo && \
        		# Sanity-checking
	        	if [[ "$key" == "" ]]; then
        			echo "No password.  For an open network, try the -u option instead."; exit 0
                		fi
		iwconfig $iface key "$key"
		fi
	# Connect to open/wep network
	echo "Running dhclient on $iface..." && dhclient $iface
	# Post-connection commands
	#sh /etc/wefe/exops/"$iface".post
}

scan(){ sudo iw wlan0 scan | sed -e 's#(on wlan# (on wlan#g' | awk -f /etc/wefe/scan.awk; }

#	USAGE		#

case $1 in

	# Add a wpa-protected network, and attempt to connect with it.
	# No need to make all this a function, because it's mostly wpa_supplicant related.
	-a)
		# Enable if you want to make BSSIDs mandatory.  Can be annoying, but more secure.
		if [[ "$requireMac" == "true" ]]; then
			# if no bssid was entered, spit and error and exit.
		        if [[ "$bssid" == "" ]]; then echo -e "bssid required\nWill now use -s to scan for mac addresses.  Find yours and rerun the script with it" && \
                		wefe -s && exit 0;
                	fi
		fi
		# Obfuscate the network passphrase.  Ideally, I would have something to just
		# replace the input values with asterisk so you can see the number of characters
		echo "Input network passphrase, then press ENTER..." && \
			stty -echo && \
			read psk && \
			stty echo && \
			# Sanity-checking
			if [[ "$psk" == "" ]]; then
				echo "No password.  For an open network, try the -u option instead."; exit 0
			fi
		# This will generate the bare minimum for an encrypted network.
		wpa_passphrase "$ssid" "$psk" > /etc/wefe/wefe-sup/"$ssid"
                # Prompt to remove the plaintext password.
                echo "Do you want to remove the plaintext password from the newly-created config?  Type yes to remove it, anything else to continue."
                        read rmPsk
                        if [[ "$rmPsk" == "y" ]]; then
                                sed -i 's/#psk.*//g' /etc/wefe/wefe-sup/"$iface"
                        fi
		# Enter custom commands
		exops
		# Prompt to edit the newly-created config
		# See also: man wpa_supplicant.conf
		echo "Do you want to edit the configuration before continuing?  Type yes; or, press any key to continue..."
			read edit
			if [[ "$edit" == "yes" ]]; then
				nano /etc/wefe/wefe-sup/"$ssid"
			fi
		# Update the network interface
		fun_update
		;;

	# For open (unencrypted) netwoks
	# I need to test this b/c I'm not sure how the variables will change.
	-u|-w) insecure ;;

	-l) ls /etc/wpa && exit 0 ;; # List previously-connected hotspots

	-s) 	# Scan for available networks and their information
		scan
		exit 0
		;;
	# Connect to a saved WPA hotspot
	-c) fun_update	;;
	# Temporarily change the interface for a currently-used file, and connect or reconnect
	# This can be useful if you're hotplugging a new USB wifi device
	#	(eg, a udev command that runs this to automatically switch between the default device
	#	and a usb device)
	-i) iface="$3" && fun_update ;;
	# Kill dhclient and wpa_supplicant
	-k) kill_them && exit 0 ;;
	# If options are passed incorrectly (or not at all), exit
	*)
		echo "Usage: wefe (-a|-u|-w|-i|-k|-l|-s|-c) ssid [ bssid ]"
		exit 0
		;;
esac
