#!/bin/ksh

# WeFe - OpenBSD edition
# Now with improved government surveillance options

if [ ! -d /etc/wefe ]; then echo "/etc/wefe doesn't exist.  Run the installer before continuing."; fi
iface=ral0

# --WHAT'S YOUR FUNCTION--

# Purge settings
purge_settings(){
	ifconfig $iface down
	echo "Purging settings for $iface..."
	ifconfig $iface -nwid 2> /dev/null
	ifconfig $iface -inet -wpa -wpakey -group egress 2> /dev/null
	ifconfig $iface up
	}

# Connect to an access point
connect(){
	# Clean network settings
	purge_settings
	# Each file in /etc/wefe/saved contains an ifconfig-dhclient template, along with
	# any user-specified pre- and post-connection commands
	/bin/ksh /etc/wefe/saved/"$ap" && \
	notify-send "Connected to $ssid [$(ifconfig $iface | grep inet | awk '{ print $2 }')]"&& \
	echo "$ap" > /etc/wefe/last-connected
	}

# Scan for saved networks.  Modified with underscores, ala /etc/wefe/saved/*
scan_ap(){ ifconfig $iface scan | sed -e 's/ /_/g' -e 's/ieee80211.*//g' > /tmp/scan; }
# Pull only access points.  Same formatting as above.
strip_ap(){ for i in $(cat /tmp/scan); do echo $i | grep nwid | sed -e 's/_chan.*//g' -e 's/.*nwid_//g'; done;}

# List stored access points
stored_ap(){
	rm /etc/wefe/networks.list 
	for ap in /etc/wefe/saved/*; do
		strip=$(echo $ap | sed 's/.*\///g')
		echo "$strip" >> /etc/wefe/networks.list
	done 
	cat /etc/wefe/networks.list; }

# Output available access points, underscores
avail_ap(){
	scan_ap
	for ssid in $(cat /etc/wefe/networks.list); do
        	if [ $(grep $ssid /tmp/scan) ]; then
	        echo "$ssid";
	fi; done; }

# Function to connect to nth access point, if desired


# --HERE WE GO--
case $1 in 

# Add a new network
add)
	echo "Enter hotspot/access point name (SSID):"
	read ssid
	echo "Enter wifi passphrase:"
	read psk
	# if the psk variable is blank, assume an insecure network, and strip 'wpa'
	# NOTE: due to weird-ass syntax, I'm not sure how to translate this to fully
	# replace the thing a couple of lines down.
	if [[ "$psk" == "" ]]; then 
		wpa_clause=""
		else wpa_clause="wpa wpakey \"$psk\""
	fi
	# Connect to an AP using MAC address
	echo "Enter the hotspot MAC address (optional):"
	read bssid
	ap=$(echo "$ssid" | sed 's/ /_/g')
        # Spoof the MAC address, if desired
	echo "Would you like to spoof the MAC address of $iface? Options:
                New Address:    type it in XX:XX:XX:XX:XX:XX format
                Random address: type 'random'  
                Default address: type 'default'"
        read custom_mac
        if [[ "$custom_mac" == "default" ]]; then lladdr="";
		elif [[ "$custom_mac" == "random" ]]; then lladdr="lladdr random";
		else lladdr="lladdr $custom_mac"; 
		fi
	echo "If you want any shell commands to run when BEFORE you connect to this network, enter them now.  (Note: you can manually edit the AP config file later, too.)"
	while read preops; do if [ ! $(echo $preops | grep -o done) ]; then echo "$preops" > /etc/wefe/saved/"$ap"; else break; fi; done
	echo "Configuring ifconfig and dhclient template in /etc/wefe/saved/$ap..."
	# Weird quote structure in order to assure double-quotes are printed literally
	echo -e ifconfig $iface nwid '"'$ssid'"' $wpa_clause $lladdr "\n"dhclient $iface >> /etc/wefe/saved/"$ap"
	echo "Done."
	echo "If you want any shell commands to run when AFTER you connect to this network, enter them now.  (Note: you can manually edit the AP config file later, too.)"
	while read postops; do if [ ! $(echo $postops | grep -o done) ]; then echo "$postops" >> /etc/wefe/saved/"$ap"; else break; fi; done
	echo "Attempting to connect to $ssid..."
	connect
;;

# Connect
on)
	# Since saved networks replace whitespace with underscore, check yoself...
	ssid="$(echo $2 | sed 's/ /_/g')"
	# ...and use the underscored modification as the connectable AP.
	ap=$(echo "$ssid" | sed 's/ /_/g')
	connect
	;;

# Info about current iface
info) ifconfig $iface ;;

# Install (first-time usage)
install)
	mkdir -p /etc/wefe/saved
	touch /etc/wefe/exops
	;;

# Lazy mode (autoconnect) - I use this in my /etc/apm/suspend and hibernate scripts
-l)
	# List all saved ssids
	saved="$(ls /etc/wefe/saved)"
	# Scan and list current networks
	scan_ap
	# Test for connectivity.  If you're already on the network, exit this script.
	# Until I can find a better way to solve this, this will test if the network is active
	# by: searching for the inet (local ip), pinging it, and exiting if a ping is successful
	localip=$(ifconfig ral0 | grep inet | awk '{ print $2 }')
	# Redirect the outputs to /dev/null; use the ping's exit code to evaluate
	echo "Testing network connection, please wait..."
	ping -c1 $localip 2>/dev/null 1>/dev/null
	if [ "$?" = 0 ]; then
		echo "Already connected.  Exiting."
		exit 0
	fi
	# Connect to the first saved match.  If you're in an area with more than one
	# saved network, lazy mode is not for you.
	for ssid in $saved; do 
		ap="$ssid" && \
		if [ $(grep $ssid /tmp/scan) ]; then 
		connect && exit 0; 
	fi; done
	rm -f /tmp/scan ;;

# List saved networks
list) stored_ap ;;

# Purge interface settings
purge) purge_settings ;;

# List only networks that are both available and stored
avail) echo "Scanning for available access points..." && avail_ap ;;

# Scan for all available networks, in two forms...
scan) 
	# verbose is just an ifconfig shortcut
	if [[ "$2" == "-v" ]]; then ifconfig $iface scan
	# Otherwise, show them as stored in /etc/wefe/saved
	else scan_ap && strip_ap; fi;;

help) echo "WeFe - the minimalist network assistant.
wefe [option]
Options:
	add	  - add a new network
	avail	  - list available saved networks (ssid only)
	info	  - settings for interface $iface
	install	  - first-time usage
	on [ssid] - connect to a network saved in /etc/wefe/saved
	purge	  - purge settings for ifconfig $iface
	scan	  - scan available networks.  ("scan -v" for full scan output.)
	-l	  - lazy mode (scan + connect to first available saved network)
	" ;;

*) echo "Incorrect usage.  Try 'wefe help' for more." ;;

esac
